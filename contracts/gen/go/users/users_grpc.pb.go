// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.0
// source: proto/users.proto

package pb_users

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RegService_Registration_FullMethodName = "/user_service.users.RegService/Registration"
	RegService_CheckUser_FullMethodName    = "/user_service.users.RegService/CheckUser"
	RegService_CheckRole_FullMethodName    = "/user_service.users.RegService/CheckRole"
)

// RegServiceClient is the client API for RegService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RegServiceClient interface {
	Registration(ctx context.Context, in *RegRequest, opts ...grpc.CallOption) (*RegResponse, error)
	CheckUser(ctx context.Context, in *CheckRequest, opts ...grpc.CallOption) (*CheckResponse, error)
	CheckRole(ctx context.Context, in *CheckRoleRequest, opts ...grpc.CallOption) (*CheckRoleResponse, error)
}

type regServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRegServiceClient(cc grpc.ClientConnInterface) RegServiceClient {
	return &regServiceClient{cc}
}

func (c *regServiceClient) Registration(ctx context.Context, in *RegRequest, opts ...grpc.CallOption) (*RegResponse, error) {
	out := new(RegResponse)
	err := c.cc.Invoke(ctx, RegService_Registration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *regServiceClient) CheckUser(ctx context.Context, in *CheckRequest, opts ...grpc.CallOption) (*CheckResponse, error) {
	out := new(CheckResponse)
	err := c.cc.Invoke(ctx, RegService_CheckUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *regServiceClient) CheckRole(ctx context.Context, in *CheckRoleRequest, opts ...grpc.CallOption) (*CheckRoleResponse, error) {
	out := new(CheckRoleResponse)
	err := c.cc.Invoke(ctx, RegService_CheckRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegServiceServer is the server API for RegService service.
// All implementations must embed UnimplementedRegServiceServer
// for forward compatibility
type RegServiceServer interface {
	Registration(context.Context, *RegRequest) (*RegResponse, error)
	CheckUser(context.Context, *CheckRequest) (*CheckResponse, error)
	CheckRole(context.Context, *CheckRoleRequest) (*CheckRoleResponse, error)
	mustEmbedUnimplementedRegServiceServer()
}

// UnimplementedRegServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRegServiceServer struct {
}

func (UnimplementedRegServiceServer) Registration(context.Context, *RegRequest) (*RegResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Registration not implemented")
}
func (UnimplementedRegServiceServer) CheckUser(context.Context, *CheckRequest) (*CheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUser not implemented")
}
func (UnimplementedRegServiceServer) CheckRole(context.Context, *CheckRoleRequest) (*CheckRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckRole not implemented")
}
func (UnimplementedRegServiceServer) mustEmbedUnimplementedRegServiceServer() {}

// UnsafeRegServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RegServiceServer will
// result in compilation errors.
type UnsafeRegServiceServer interface {
	mustEmbedUnimplementedRegServiceServer()
}

func RegisterRegServiceServer(s grpc.ServiceRegistrar, srv RegServiceServer) {
	s.RegisterService(&RegService_ServiceDesc, srv)
}

func _RegService_Registration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegServiceServer).Registration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegService_Registration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegServiceServer).Registration(ctx, req.(*RegRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegService_CheckUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegServiceServer).CheckUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegService_CheckUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegServiceServer).CheckUser(ctx, req.(*CheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegService_CheckRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegServiceServer).CheckRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegService_CheckRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegServiceServer).CheckRole(ctx, req.(*CheckRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RegService_ServiceDesc is the grpc.ServiceDesc for RegService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RegService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user_service.users.RegService",
	HandlerType: (*RegServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Registration",
			Handler:    _RegService_Registration_Handler,
		},
		{
			MethodName: "CheckUser",
			Handler:    _RegService_CheckUser_Handler,
		},
		{
			MethodName: "CheckRole",
			Handler:    _RegService_CheckRole_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/users.proto",
}
